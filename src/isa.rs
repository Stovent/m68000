use super::{M68000, MemoryAccess};
use super::disassembler::*;
use super::instruction::Instruction;
use super::memory_access::U16Iter;
use super::instruction::*;

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Isa {
    Unknown,
    Abcd,
    Add,
    Adda,
    Addi,
    Addq,
    Addx,
    And,
    Andi,
    Andiccr,
    Andisr,
    Asm,
    Asr,
    Bcc,
    Bchg,
    Bclr,
    Bra,
    Bset,
    Bsr,
    Btst,
    Chk,
    Clr,
    Cmp,
    Cmpa,
    Cmpi,
    Cmpm,
    Dbcc,
    Divs,
    Divu,
    Eor,
    Eori,
    Eoriccr,
    Eorisr,
    Exg,
    Ext,
    Illegal,
    Jmp,
    Jsr,
    Lea,
    Link,
    Lsm,
    Lsr,
    Move,
    Movea,
    Moveccr,
    Movefsr,
    Movesr,
    Moveusp,
    Movem,
    Movep,
    Moveq,
    Muls,
    Mulu,
    Nbcd,
    Neg,
    Negx,
    Nop,
    Not,
    Or,
    Ori,
    Oriccr,
    Orisr,
    Pea,
    Reset,
    Rom,
    Ror,
    Roxm,
    Roxr,
    Rte,
    Rtr,
    Rts,
    Sbcd,
    Scc,
    Stop,
    Sub,
    Suba,
    Subi,
    Subq,
    Subx,
    Swap,
    Tas,
    Trap,
    Trapv,
    Tst,
    Unlk,
    Size_,
}

#[derive(Clone, Copy)]
pub(super) struct IsaEntry<M: MemoryAccess> {
    // /// The ISA value.
    // pub isa: Isa,
    /// Function used to decode the instruction.
    pub decode: fn(u16, &mut dyn U16Iter) -> (Operands, usize),
    /// Function used to executing the instruction.
    pub execute: fn(&mut M68000<M>, &mut Instruction) -> usize,
    /// Function used to diassemble the instruction.
    pub disassemble: fn(&mut Instruction) -> String,
}

impl<M: MemoryAccess> M68000<M> {
    pub(super) const ISA_ENTRY: [IsaEntry<M>; Isa::Size_ as usize] = [
        IsaEntry { /* isa: Isa::Unknown,*/ decode: no_operands, execute: Self::unknown_instruction, disassemble: disassemble_unknown_instruction, },
        IsaEntry { /* isa: Isa::Abcd,*/ decode: register_size_mode_register, execute: Self::abcd, disassemble: disassemble_abcd, },
        IsaEntry { /* isa: Isa::Add,*/ decode: register_direction_size_effective_address, execute: Self::add, disassemble: disassemble_add, },
        IsaEntry { /* isa: Isa::Adda,*/ decode: register_size_effective_address, execute: Self::adda, disassemble: disassemble_adda, },
        IsaEntry { /* isa: Isa::Addi,*/ decode: size_effective_address_immediate, execute: Self::addi, disassemble: disassemble_addi, },
        IsaEntry { /* isa: Isa::Addq,*/ decode: data_size_effective_address, execute: Self::addq, disassemble: disassemble_addq, },
        IsaEntry { /* isa: Isa::Addx,*/ decode: register_size_mode_register, execute: Self::addx, disassemble: disassemble_addx, },
        IsaEntry { /* isa: Isa::And,*/ decode: register_direction_size_effective_address, execute: Self::and, disassemble: disassemble_and, },
        IsaEntry { /* isa: Isa::Andi,*/ decode: size_effective_address_immediate, execute: Self::andi, disassemble: disassemble_andi, },
        IsaEntry { /* isa: Isa::Andiccr,*/ decode: immediate, execute: Self::andiccr, disassemble: disassemble_andiccr },
        IsaEntry { /* isa: Isa::Andisr,*/ decode: immediate, execute: Self::andisr, disassemble: disassemble_andisr, },
        IsaEntry { /* isa: Isa::Asm,*/ decode: direction_effective_address, execute: Self::asm, disassemble: disassemble_asm, },
        IsaEntry { /* isa: Isa::Asr,*/ decode: rotation_direction_size_mode_register, execute: Self::asr, disassemble: disassemble_asr, },
        IsaEntry { /* isa: Isa::Bcc,*/ decode: condition_displacement, execute: Self::bcc, disassemble: disassemble_bcc, },
        IsaEntry { /* isa: Isa::Bchg,*/ decode: effective_address_count, execute: Self::bchg, disassemble: disassemble_bchg, },
        IsaEntry { /* isa: Isa::Bclr,*/ decode: effective_address_count, execute: Self::bclr, disassemble: disassemble_bclr, },
        IsaEntry { /* isa: Isa::Bra,*/ decode: displacement, execute: Self::bra, disassemble: disassemble_bra, },
        IsaEntry { /* isa: Isa::Bset,*/ decode: effective_address_count, execute: Self::bset, disassemble: disassemble_bset, },
        IsaEntry { /* isa: Isa::Bsr,*/ decode: displacement, execute: Self::bsr, disassemble: disassemble_bsr, },
        IsaEntry { /* isa: Isa::Btst,*/ decode: effective_address_count, execute: Self::btst, disassemble: disassemble_btst, },
        IsaEntry { /* isa: Isa::Chk,*/ decode: register_effective_address, execute: Self::chk, disassemble: disassemble_chk, },
        IsaEntry { /* isa: Isa::Clr,*/ decode: size_effective_address, execute: Self::clr, disassemble: disassemble_clr, },
        IsaEntry { /* isa: Isa::Cmp,*/ decode: register_direction_size_effective_address, execute: Self::cmp, disassemble: disassemble_cmp, },
        IsaEntry { /* isa: Isa::Cmpa,*/ decode: register_size_effective_address, execute: Self::cmpa, disassemble: disassemble_cmpa, },
        IsaEntry { /* isa: Isa::Cmpi,*/ decode: size_effective_address_immediate, execute: Self::cmpi, disassemble: disassemble_cmpi, },
        IsaEntry { /* isa: Isa::Cmpm,*/ decode: register_size_register, execute: Self::cmpm, disassemble: disassemble_cmpm, },
        IsaEntry { /* isa: Isa::Dbcc,*/ decode: condition_register_displacement, execute: Self::dbcc, disassemble: disassemble_dbcc, },
        IsaEntry { /* isa: Isa::Divs,*/ decode: register_effective_address, execute: Self::divs, disassemble: disassemble_divs, },
        IsaEntry { /* isa: Isa::Divu,*/ decode: register_effective_address, execute: Self::divu, disassemble: disassemble_divu, },
        IsaEntry { /* isa: Isa::Eor,*/ decode: register_direction_size_effective_address, execute: Self::eor, disassemble: disassemble_eor, },
        IsaEntry { /* isa: Isa::Eori,*/ decode: size_effective_address_immediate, execute: Self::eori, disassemble: disassemble_eori, },
        IsaEntry { /* isa: Isa::Eoriccr,*/ decode: immediate, execute: Self::eoriccr, disassemble: disassemble_eoriccr, },
        IsaEntry { /* isa: Isa::Eorisr,*/ decode: immediate, execute: Self::eorisr, disassemble: disassemble_eorisr, },
        IsaEntry { /* isa: Isa::Exg,*/ decode: register_opmode_register, execute: Self::exg, disassemble: disassemble_exg, },
        IsaEntry { /* isa: Isa::Ext,*/ decode: opmode_register, execute: Self::ext, disassemble: disassemble_ext, },
        IsaEntry { /* isa: Isa::Illegal,*/ decode: no_operands, execute: Self::illegal, disassemble: disassemble_illegal, },
        IsaEntry { /* isa: Isa::Jmp,*/ decode: effective_address, execute: Self::jmp, disassemble: disassemble_jmp, },
        IsaEntry { /* isa: Isa::Jsr,*/ decode: effective_address, execute: Self::jsr, disassemble: disassemble_jsr, },
        IsaEntry { /* isa: Isa::Lea,*/ decode: register_effective_address, execute: Self::lea, disassemble: disassemble_lea, },
        IsaEntry { /* isa: Isa::Link,*/ decode: register_displacement, execute: Self::link, disassemble: disassemble_link, },
        IsaEntry { /* isa: Isa::Lsm,*/ decode: direction_effective_address, execute: Self::lsm, disassemble: disassemble_lsm, },
        IsaEntry { /* isa: Isa::Lsr,*/ decode: rotation_direction_size_mode_register, execute: Self::lsr, disassemble: disassemble_lsr, },
        IsaEntry { /* isa: Isa::Move,*/ decode: size_effective_address_effective_address, execute: Self::r#move, disassemble: disassemble_move, },
        IsaEntry { /* isa: Isa::Movea,*/ decode: size_register_effective_address, execute: Self::movea, disassemble: disassemble_movea, },
        IsaEntry { /* isa: Isa::Moveccr,*/ decode: effective_address, execute: Self::moveccr, disassemble: disassemble_moveccr, },
        IsaEntry { /* isa: Isa::Movefsr,*/ decode: effective_address, execute: Self::movefsr, disassemble: disassemble_movefsr, },
        IsaEntry { /* isa: Isa::Movesr,*/ decode: effective_address, execute: Self::movesr, disassemble: disassemble_movesr, },
        IsaEntry { /* isa: Isa::Moveusp,*/ decode: direction_register, execute: Self::moveusp, disassemble: disassemble_moveusp, },
        IsaEntry { /* isa: Isa::Movem,*/ decode: direction_size_effective_address_list, execute: Self::movem, disassemble: disassemble_movem, },
        IsaEntry { /* isa: Isa::Movep,*/ decode: register_direction_size_register_displacement, execute: Self::movep, disassemble: disassemble_movep, },
        IsaEntry { /* isa: Isa::Moveq,*/ decode: register_data, execute: Self::moveq, disassemble: disassemble_moveq, },
        IsaEntry { /* isa: Isa::Muls,*/ decode: register_effective_address, execute: Self::muls, disassemble: disassemble_muls, },
        IsaEntry { /* isa: Isa::Mulu,*/ decode: register_effective_address, execute: Self::mulu, disassemble: disassemble_mulu, },
        IsaEntry { /* isa: Isa::Nbcd,*/ decode: effective_address, execute: Self::nbcd, disassemble: disassemble_nbcd, },
        IsaEntry { /* isa: Isa::Neg,*/ decode: size_effective_address, execute: Self::neg, disassemble: disassemble_neg, },
        IsaEntry { /* isa: Isa::Negx,*/ decode: size_effective_address, execute: Self::negx, disassemble: disassemble_negx, },
        IsaEntry { /* isa: Isa::Nop,*/ decode: no_operands, execute: Self::nop, disassemble: disassemble_nop, },
        IsaEntry { /* isa: Isa::Not,*/ decode: size_effective_address, execute: Self::not, disassemble: disassemble_not, },
        IsaEntry { /* isa: Isa::Or,*/ decode: register_direction_size_effective_address, execute: Self::or, disassemble: disassemble_or, },
        IsaEntry { /* isa: Isa::Ori,*/ decode: size_effective_address_immediate, execute: Self::ori, disassemble: disassemble_ori, },
        IsaEntry { /* isa: Isa::Oriccr,*/ decode: immediate, execute: Self::oriccr, disassemble: disassemble_oriccr, },
        IsaEntry { /* isa: Isa::Orisr,*/ decode: immediate, execute: Self::orisr, disassemble: disassemble_orisr, },
        IsaEntry { /* isa: Isa::Pea,*/ decode: effective_address, execute: Self::pea, disassemble: disassemble_pea, },
        IsaEntry { /* isa: Isa::Reset,*/ decode: no_operands, execute: Self::reset, disassemble: disassemble_reset, },
        IsaEntry { /* isa: Isa::Rom,*/ decode: direction_effective_address, execute: Self::rom, disassemble: disassemble_rom, },
        IsaEntry { /* isa: Isa::Ror,*/ decode: rotation_direction_size_mode_register, execute: Self::ror, disassemble: disassemble_ror, },
        IsaEntry { /* isa: Isa::Roxm,*/ decode: direction_effective_address, execute: Self::roxm, disassemble: disassemble_roxm, },
        IsaEntry { /* isa: Isa::Roxr,*/ decode: rotation_direction_size_mode_register, execute: Self::roxr, disassemble: disassemble_roxr, },
        IsaEntry { /* isa: Isa::Rte,*/ decode: no_operands, execute: Self::rte, disassemble: disassemble_rte, },
        IsaEntry { /* isa: Isa::Rtr,*/ decode: no_operands, execute: Self::rtr, disassemble: disassemble_rtr, },
        IsaEntry { /* isa: Isa::Rts,*/ decode: no_operands, execute: Self::rts, disassemble: disassemble_rts, },
        IsaEntry { /* isa: Isa::Sbcd,*/ decode: register_size_mode_register, execute: Self::sbcd, disassemble: disassemble_sbcd, },
        IsaEntry { /* isa: Isa::Scc,*/ decode: condition_effective_address, execute: Self::scc, disassemble: disassemble_scc, },
        IsaEntry { /* isa: Isa::Stop,*/ decode: immediate, execute: Self::stop, disassemble: disassemble_stop, },
        IsaEntry { /* isa: Isa::Sub,*/ decode: register_direction_size_effective_address, execute: Self::sub, disassemble: disassemble_sub, },
        IsaEntry { /* isa: Isa::Suba,*/ decode: register_size_effective_address, execute: Self::suba, disassemble: disassemble_suba, },
        IsaEntry { /* isa: Isa::Subi,*/ decode: size_effective_address_immediate, execute: Self::subi, disassemble: disassemble_subi, },
        IsaEntry { /* isa: Isa::Subq,*/ decode: data_size_effective_address, execute: Self::subq, disassemble: disassemble_subq, },
        IsaEntry { /* isa: Isa::Subx,*/ decode: register_size_mode_register, execute: Self::subx, disassemble: disassemble_subx, },
        IsaEntry { /* isa: Isa::Swap,*/ decode: register, execute: Self::swap, disassemble: disassemble_swap, },
        IsaEntry { /* isa: Isa::Tas,*/ decode: effective_address, execute: Self::tas, disassemble: disassemble_tas, },
        IsaEntry { /* isa: Isa::Trap,*/ decode: vector, execute: Self::trap, disassemble: disassemble_trap, },
        IsaEntry { /* isa: Isa::Trapv,*/ decode: no_operands, execute: Self::trapv, disassemble: disassemble_trapv, },
        IsaEntry { /* isa: Isa::Tst,*/ decode: size_effective_address, execute: Self::tst, disassemble: disassemble_tst, },
        IsaEntry { /* isa: Isa::Unlk,*/ decode: register, execute: Self::unlk, disassemble: disassemble_unlk, },
    ];
}
